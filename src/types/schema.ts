import { array, number, object, record, string, boolean, date, union, TypeOf, z } from 'zod';

export const dbInfoSchema = object({
  id: string().optional(), // Generated by the app since its full offline
  createdAt: string().optional(),
  updatedAt: string().optional(),
  lastSyncedAt: string().optional(),
});

export const modelConfigSchema = object({
  n_gpu_layers: number().optional(),
  n_threads: number().optional(),
  n_batch: number().optional(),
  n_context: number().optional(),
});

export const modelSchema = dbInfoSchema.extend({
  name: string().min(1, { message: 'FieldRequired' }),
  description: string(),
  isCloud: boolean(),
  imageURI: string().optional(),
  modelURI: string().min(1, { message: 'FieldRequired' }),
  loraURI: string().optional(),
  config: modelConfigSchema.optional(),
});

export const promptSchema = dbInfoSchema.extend({
  name: string().min(1, { message: 'FieldRequired' }),
  systemPrompt: string().min(1, { message: 'FieldRequired' }),
  tags: array(string()).optional(),
  modelIDs: array(string()).optional(),
});

export type Model = TypeOf<typeof modelSchema>;

